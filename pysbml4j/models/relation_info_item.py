# coding: utf-8

"""
    sbml4j API

    This is the api for the SBML4j Service   # noqa: E501

    OpenAPI spec version: 1.1.4
    Contact: thorsten.tiede@uni-tuebingen.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RelationInfoItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'sbo_term': 'str',
        'direction': 'str'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'sbo_term': 'sboTerm',
        'direction': 'direction'
    }

    def __init__(self, name=None, type=None, sbo_term=None, direction=None):  # noqa: E501
        """RelationInfoItem - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._type = None
        self._sbo_term = None
        self._direction = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if sbo_term is not None:
            self.sbo_term = sbo_term
        if direction is not None:
            self.direction = direction

    @property
    def name(self):
        """Gets the name of this RelationInfoItem.  # noqa: E501

        The name of the related gene  # noqa: E501

        :return: The name of this RelationInfoItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RelationInfoItem.

        The name of the related gene  # noqa: E501

        :param name: The name of this RelationInfoItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this RelationInfoItem.  # noqa: E501

        The type of the relation between the two genes  # noqa: E501

        :return: The type of this RelationInfoItem.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RelationInfoItem.

        The type of the relation between the two genes  # noqa: E501

        :param type: The type of this RelationInfoItem.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def sbo_term(self):
        """Gets the sbo_term of this RelationInfoItem.  # noqa: E501

        The sboTerm of this relation  # noqa: E501

        :return: The sbo_term of this RelationInfoItem.  # noqa: E501
        :rtype: str
        """
        return self._sbo_term

    @sbo_term.setter
    def sbo_term(self, sbo_term):
        """Sets the sbo_term of this RelationInfoItem.

        The sboTerm of this relation  # noqa: E501

        :param sbo_term: The sbo_term of this RelationInfoItem.  # noqa: E501
        :type: str
        """

        self._sbo_term = sbo_term

    @property
    def direction(self):
        """Gets the direction of this RelationInfoItem.  # noqa: E501

        The direction of this relation in relation to the parent  # noqa: E501

        :return: The direction of this RelationInfoItem.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this RelationInfoItem.

        The direction of this relation in relation to the parent  # noqa: E501

        :param direction: The direction of this RelationInfoItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["in", "out", "inout"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RelationInfoItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RelationInfoItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
