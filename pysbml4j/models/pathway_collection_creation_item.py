# coding: utf-8

"""
    sbml4j API

    This is the api for the SBML4j Service   # noqa: E501

    OpenAPI spec version: 1.1.5
    Contact: thorsten.tiede@uni-tuebingen.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PathwayCollectionCreationItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'database_uuid': 'str',
        'source_pathway_uui_ds': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'database_uuid': 'databaseUUID',
        'source_pathway_uui_ds': 'sourcePathwayUUIDs'
    }

    def __init__(self, name=None, description=None, database_uuid=None, source_pathway_uui_ds=None):  # noqa: E501
        """PathwayCollectionCreationItem - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._database_uuid = None
        self._source_pathway_uui_ds = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if database_uuid is not None:
            self.database_uuid = database_uuid
        if source_pathway_uui_ds is not None:
            self.source_pathway_uui_ds = source_pathway_uui_ds

    @property
    def name(self):
        """Gets the name of this PathwayCollectionCreationItem.  # noqa: E501

        The name of the collection to be created  # noqa: E501

        :return: The name of this PathwayCollectionCreationItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PathwayCollectionCreationItem.

        The name of the collection to be created  # noqa: E501

        :param name: The name of this PathwayCollectionCreationItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this PathwayCollectionCreationItem.  # noqa: E501

        The description for the collection created  # noqa: E501

        :return: The description of this PathwayCollectionCreationItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PathwayCollectionCreationItem.

        The description for the collection created  # noqa: E501

        :param description: The description of this PathwayCollectionCreationItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def database_uuid(self):
        """Gets the database_uuid of this PathwayCollectionCreationItem.  # noqa: E501

        The UUID of the database those pathways are from  # noqa: E501

        :return: The database_uuid of this PathwayCollectionCreationItem.  # noqa: E501
        :rtype: str
        """
        return self._database_uuid

    @database_uuid.setter
    def database_uuid(self, database_uuid):
        """Sets the database_uuid of this PathwayCollectionCreationItem.

        The UUID of the database those pathways are from  # noqa: E501

        :param database_uuid: The database_uuid of this PathwayCollectionCreationItem.  # noqa: E501
        :type: str
        """

        self._database_uuid = database_uuid

    @property
    def source_pathway_uui_ds(self):
        """Gets the source_pathway_uui_ds of this PathwayCollectionCreationItem.  # noqa: E501

        List of pathway UUIDs that are to be included in this collection  # noqa: E501

        :return: The source_pathway_uui_ds of this PathwayCollectionCreationItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._source_pathway_uui_ds

    @source_pathway_uui_ds.setter
    def source_pathway_uui_ds(self, source_pathway_uui_ds):
        """Sets the source_pathway_uui_ds of this PathwayCollectionCreationItem.

        List of pathway UUIDs that are to be included in this collection  # noqa: E501

        :param source_pathway_uui_ds: The source_pathway_uui_ds of this PathwayCollectionCreationItem.  # noqa: E501
        :type: list[str]
        """

        self._source_pathway_uui_ds = source_pathway_uui_ds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PathwayCollectionCreationItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PathwayCollectionCreationItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
