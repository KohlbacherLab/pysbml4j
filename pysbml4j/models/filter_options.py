# coding: utf-8

"""
    sbml4j API

    This is the api for the SBML4j Service   # noqa: E501

    OpenAPI spec version: 1.1.4
    Contact: thorsten.tiede@uni-tuebingen.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FilterOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node_types': 'list[str]',
        'relation_types': 'list[str]',
        'node_symbols': 'list[str]',
        'relation_symbols': 'list[str]'
    }

    attribute_map = {
        'node_types': 'nodeTypes',
        'relation_types': 'relationTypes',
        'node_symbols': 'nodeSymbols',
        'relation_symbols': 'relationSymbols'
    }

    def __init__(self, node_types=None, relation_types=None, node_symbols=None, relation_symbols=None):  # noqa: E501
        """FilterOptions - a model defined in Swagger"""  # noqa: E501
        self._node_types = None
        self._relation_types = None
        self._node_symbols = None
        self._relation_symbols = None
        self.discriminator = None
        if node_types is not None:
            self.node_types = node_types
        if relation_types is not None:
            self.relation_types = relation_types
        if node_symbols is not None:
            self.node_symbols = node_symbols
        if relation_symbols is not None:
            self.relation_symbols = relation_symbols

    @property
    def node_types(self):
        """Gets the node_types of this FilterOptions.  # noqa: E501


        :return: The node_types of this FilterOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._node_types

    @node_types.setter
    def node_types(self, node_types):
        """Sets the node_types of this FilterOptions.


        :param node_types: The node_types of this FilterOptions.  # noqa: E501
        :type: list[str]
        """

        self._node_types = node_types

    @property
    def relation_types(self):
        """Gets the relation_types of this FilterOptions.  # noqa: E501


        :return: The relation_types of this FilterOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._relation_types

    @relation_types.setter
    def relation_types(self, relation_types):
        """Sets the relation_types of this FilterOptions.


        :param relation_types: The relation_types of this FilterOptions.  # noqa: E501
        :type: list[str]
        """

        self._relation_types = relation_types

    @property
    def node_symbols(self):
        """Gets the node_symbols of this FilterOptions.  # noqa: E501


        :return: The node_symbols of this FilterOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._node_symbols

    @node_symbols.setter
    def node_symbols(self, node_symbols):
        """Sets the node_symbols of this FilterOptions.


        :param node_symbols: The node_symbols of this FilterOptions.  # noqa: E501
        :type: list[str]
        """

        self._node_symbols = node_symbols

    @property
    def relation_symbols(self):
        """Gets the relation_symbols of this FilterOptions.  # noqa: E501


        :return: The relation_symbols of this FilterOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._relation_symbols

    @relation_symbols.setter
    def relation_symbols(self, relation_symbols):
        """Sets the relation_symbols of this FilterOptions.


        :param relation_symbols: The relation_symbols of this FilterOptions.  # noqa: E501
        :type: list[str]
        """

        self._relation_symbols = relation_symbols

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilterOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilterOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
