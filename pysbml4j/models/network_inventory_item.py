# coding: utf-8

"""
    sbml4j API

    This is the api for the SBML4j Service   # noqa: E501

    OpenAPI spec version: 1.1.5
    Contact: thorsten.tiede@uni-tuebingen.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NetworkInventoryItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uuid': 'str',
        'name': 'str',
        'organism_code': 'str',
        'number_of_nodes': 'int',
        'number_of_relations': 'int',
        'node_types': 'list[str]',
        'relation_types': 'list[str]',
        'network_mapping_type': 'str'
    }

    attribute_map = {
        'uuid': 'UUID',
        'name': 'name',
        'organism_code': 'organismCode',
        'number_of_nodes': 'numberOfNodes',
        'number_of_relations': 'numberOfRelations',
        'node_types': 'nodeTypes',
        'relation_types': 'relationTypes',
        'network_mapping_type': 'networkMappingType'
    }

    def __init__(self, uuid=None, name=None, organism_code=None, number_of_nodes=None, number_of_relations=None, node_types=None, relation_types=None, network_mapping_type=None):  # noqa: E501
        """NetworkInventoryItem - a model defined in Swagger"""  # noqa: E501
        self._uuid = None
        self._name = None
        self._organism_code = None
        self._number_of_nodes = None
        self._number_of_relations = None
        self._node_types = None
        self._relation_types = None
        self._network_mapping_type = None
        self.discriminator = None
        if uuid is not None:
            self.uuid = uuid
        if name is not None:
            self.name = name
        if organism_code is not None:
            self.organism_code = organism_code
        if number_of_nodes is not None:
            self.number_of_nodes = number_of_nodes
        if number_of_relations is not None:
            self.number_of_relations = number_of_relations
        if node_types is not None:
            self.node_types = node_types
        if relation_types is not None:
            self.relation_types = relation_types
        if network_mapping_type is not None:
            self.network_mapping_type = network_mapping_type

    @property
    def uuid(self):
        """Gets the uuid of this NetworkInventoryItem.  # noqa: E501


        :return: The uuid of this NetworkInventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this NetworkInventoryItem.


        :param uuid: The uuid of this NetworkInventoryItem.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def name(self):
        """Gets the name of this NetworkInventoryItem.  # noqa: E501


        :return: The name of this NetworkInventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NetworkInventoryItem.


        :param name: The name of this NetworkInventoryItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def organism_code(self):
        """Gets the organism_code of this NetworkInventoryItem.  # noqa: E501

        Three letter organism code this network belongs to  # noqa: E501

        :return: The organism_code of this NetworkInventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._organism_code

    @organism_code.setter
    def organism_code(self, organism_code):
        """Sets the organism_code of this NetworkInventoryItem.

        Three letter organism code this network belongs to  # noqa: E501

        :param organism_code: The organism_code of this NetworkInventoryItem.  # noqa: E501
        :type: str
        """

        self._organism_code = organism_code

    @property
    def number_of_nodes(self):
        """Gets the number_of_nodes of this NetworkInventoryItem.  # noqa: E501


        :return: The number_of_nodes of this NetworkInventoryItem.  # noqa: E501
        :rtype: int
        """
        return self._number_of_nodes

    @number_of_nodes.setter
    def number_of_nodes(self, number_of_nodes):
        """Sets the number_of_nodes of this NetworkInventoryItem.


        :param number_of_nodes: The number_of_nodes of this NetworkInventoryItem.  # noqa: E501
        :type: int
        """

        self._number_of_nodes = number_of_nodes

    @property
    def number_of_relations(self):
        """Gets the number_of_relations of this NetworkInventoryItem.  # noqa: E501


        :return: The number_of_relations of this NetworkInventoryItem.  # noqa: E501
        :rtype: int
        """
        return self._number_of_relations

    @number_of_relations.setter
    def number_of_relations(self, number_of_relations):
        """Sets the number_of_relations of this NetworkInventoryItem.


        :param number_of_relations: The number_of_relations of this NetworkInventoryItem.  # noqa: E501
        :type: int
        """

        self._number_of_relations = number_of_relations

    @property
    def node_types(self):
        """Gets the node_types of this NetworkInventoryItem.  # noqa: E501


        :return: The node_types of this NetworkInventoryItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._node_types

    @node_types.setter
    def node_types(self, node_types):
        """Sets the node_types of this NetworkInventoryItem.


        :param node_types: The node_types of this NetworkInventoryItem.  # noqa: E501
        :type: list[str]
        """

        self._node_types = node_types

    @property
    def relation_types(self):
        """Gets the relation_types of this NetworkInventoryItem.  # noqa: E501


        :return: The relation_types of this NetworkInventoryItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._relation_types

    @relation_types.setter
    def relation_types(self, relation_types):
        """Sets the relation_types of this NetworkInventoryItem.


        :param relation_types: The relation_types of this NetworkInventoryItem.  # noqa: E501
        :type: list[str]
        """

        self._relation_types = relation_types

    @property
    def network_mapping_type(self):
        """Gets the network_mapping_type of this NetworkInventoryItem.  # noqa: E501

        One of: REGULATORY, SIGNALLING, PPI, METABOLIC, PATHWAYMAPPING  # noqa: E501

        :return: The network_mapping_type of this NetworkInventoryItem.  # noqa: E501
        :rtype: str
        """
        return self._network_mapping_type

    @network_mapping_type.setter
    def network_mapping_type(self, network_mapping_type):
        """Sets the network_mapping_type of this NetworkInventoryItem.

        One of: REGULATORY, SIGNALLING, PPI, METABOLIC, PATHWAYMAPPING  # noqa: E501

        :param network_mapping_type: The network_mapping_type of this NetworkInventoryItem.  # noqa: E501
        :type: str
        """

        self._network_mapping_type = network_mapping_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkInventoryItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkInventoryItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
