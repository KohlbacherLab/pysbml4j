# coding: utf-8

"""
    sbml4j API

    This is the api for the SBML4j Service   # noqa: E501

    OpenAPI spec version: 1.1.4
    Contact: thorsten.tiede@uni-tuebingen.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnnotationItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'node_annotation_name': 'str',
        'node_annotation_type': 'str',
        'node_annotation': 'dict(str, Object)',
        'relation_annotation_name': 'str',
        'relation_annotation_type': 'str',
        'relation_annotation': 'dict(str, Object)'
    }

    attribute_map = {
        'node_annotation_name': 'nodeAnnotationName',
        'node_annotation_type': 'nodeAnnotationType',
        'node_annotation': 'nodeAnnotation',
        'relation_annotation_name': 'relationAnnotationName',
        'relation_annotation_type': 'relationAnnotationType',
        'relation_annotation': 'relationAnnotation'
    }

    def __init__(self, node_annotation_name=None, node_annotation_type=None, node_annotation=None, relation_annotation_name=None, relation_annotation_type=None, relation_annotation=None):  # noqa: E501
        """AnnotationItem - a model defined in Swagger"""  # noqa: E501
        self._node_annotation_name = None
        self._node_annotation_type = None
        self._node_annotation = None
        self._relation_annotation_name = None
        self._relation_annotation_type = None
        self._relation_annotation = None
        self.discriminator = None
        if node_annotation_name is not None:
            self.node_annotation_name = node_annotation_name
        if node_annotation_type is not None:
            self.node_annotation_type = node_annotation_type
        if node_annotation is not None:
            self.node_annotation = node_annotation
        if relation_annotation_name is not None:
            self.relation_annotation_name = relation_annotation_name
        if relation_annotation_type is not None:
            self.relation_annotation_type = relation_annotation_type
        if relation_annotation is not None:
            self.relation_annotation = relation_annotation

    @property
    def node_annotation_name(self):
        """Gets the node_annotation_name of this AnnotationItem.  # noqa: E501

        The name of the annotation to be added to nodes  # noqa: E501

        :return: The node_annotation_name of this AnnotationItem.  # noqa: E501
        :rtype: str
        """
        return self._node_annotation_name

    @node_annotation_name.setter
    def node_annotation_name(self, node_annotation_name):
        """Sets the node_annotation_name of this AnnotationItem.

        The name of the annotation to be added to nodes  # noqa: E501

        :param node_annotation_name: The node_annotation_name of this AnnotationItem.  # noqa: E501
        :type: str
        """

        self._node_annotation_name = node_annotation_name

    @property
    def node_annotation_type(self):
        """Gets the node_annotation_type of this AnnotationItem.  # noqa: E501

        The type of the annotation values (e.g. string, int, boolean)  # noqa: E501

        :return: The node_annotation_type of this AnnotationItem.  # noqa: E501
        :rtype: str
        """
        return self._node_annotation_type

    @node_annotation_type.setter
    def node_annotation_type(self, node_annotation_type):
        """Sets the node_annotation_type of this AnnotationItem.

        The type of the annotation values (e.g. string, int, boolean)  # noqa: E501

        :param node_annotation_type: The node_annotation_type of this AnnotationItem.  # noqa: E501
        :type: str
        """

        self._node_annotation_type = node_annotation_type

    @property
    def node_annotation(self):
        """Gets the node_annotation of this AnnotationItem.  # noqa: E501


        :return: The node_annotation of this AnnotationItem.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._node_annotation

    @node_annotation.setter
    def node_annotation(self, node_annotation):
        """Sets the node_annotation of this AnnotationItem.


        :param node_annotation: The node_annotation of this AnnotationItem.  # noqa: E501
        :type: dict(str, Object)
        """

        self._node_annotation = node_annotation

    @property
    def relation_annotation_name(self):
        """Gets the relation_annotation_name of this AnnotationItem.  # noqa: E501

        The name of the annotation to be added to relations  # noqa: E501

        :return: The relation_annotation_name of this AnnotationItem.  # noqa: E501
        :rtype: str
        """
        return self._relation_annotation_name

    @relation_annotation_name.setter
    def relation_annotation_name(self, relation_annotation_name):
        """Sets the relation_annotation_name of this AnnotationItem.

        The name of the annotation to be added to relations  # noqa: E501

        :param relation_annotation_name: The relation_annotation_name of this AnnotationItem.  # noqa: E501
        :type: str
        """

        self._relation_annotation_name = relation_annotation_name

    @property
    def relation_annotation_type(self):
        """Gets the relation_annotation_type of this AnnotationItem.  # noqa: E501

        The type of the annotation values (e.g. string, int, boolean)  # noqa: E501

        :return: The relation_annotation_type of this AnnotationItem.  # noqa: E501
        :rtype: str
        """
        return self._relation_annotation_type

    @relation_annotation_type.setter
    def relation_annotation_type(self, relation_annotation_type):
        """Sets the relation_annotation_type of this AnnotationItem.

        The type of the annotation values (e.g. string, int, boolean)  # noqa: E501

        :param relation_annotation_type: The relation_annotation_type of this AnnotationItem.  # noqa: E501
        :type: str
        """

        self._relation_annotation_type = relation_annotation_type

    @property
    def relation_annotation(self):
        """Gets the relation_annotation of this AnnotationItem.  # noqa: E501


        :return: The relation_annotation of this AnnotationItem.  # noqa: E501
        :rtype: dict(str, Object)
        """
        return self._relation_annotation

    @relation_annotation.setter
    def relation_annotation(self, relation_annotation):
        """Sets the relation_annotation of this AnnotationItem.


        :param relation_annotation: The relation_annotation of this AnnotationItem.  # noqa: E501
        :type: dict(str, Object)
        """

        self._relation_annotation = relation_annotation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnnotationItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnnotationItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
