# coding: utf-8

"""
    sbml4j API

    This is the api for the SBML4j Service   # noqa: E501

    OpenAPI spec version: 1.1.5
    Contact: thorsten.tiede@uni-tuebingen.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OverviewNetworkItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_network_uuid': 'str',
        'genes': 'list[str]',
        'annotation_name': 'str',
        'network_name': 'str'
    }

    attribute_map = {
        'base_network_uuid': 'baseNetworkUUID',
        'genes': 'genes',
        'annotation_name': 'annotationName',
        'network_name': 'networkName'
    }

    def __init__(self, base_network_uuid=None, genes=None, annotation_name=None, network_name=None):  # noqa: E501
        """OverviewNetworkItem - a model defined in Swagger"""  # noqa: E501
        self._base_network_uuid = None
        self._genes = None
        self._annotation_name = None
        self._network_name = None
        self.discriminator = None
        if base_network_uuid is not None:
            self.base_network_uuid = base_network_uuid
        if genes is not None:
            self.genes = genes
        if annotation_name is not None:
            self.annotation_name = annotation_name
        if network_name is not None:
            self.network_name = network_name

    @property
    def base_network_uuid(self):
        """Gets the base_network_uuid of this OverviewNetworkItem.  # noqa: E501


        :return: The base_network_uuid of this OverviewNetworkItem.  # noqa: E501
        :rtype: str
        """
        return self._base_network_uuid

    @base_network_uuid.setter
    def base_network_uuid(self, base_network_uuid):
        """Sets the base_network_uuid of this OverviewNetworkItem.


        :param base_network_uuid: The base_network_uuid of this OverviewNetworkItem.  # noqa: E501
        :type: str
        """

        self._base_network_uuid = base_network_uuid

    @property
    def genes(self):
        """Gets the genes of this OverviewNetworkItem.  # noqa: E501


        :return: The genes of this OverviewNetworkItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._genes

    @genes.setter
    def genes(self, genes):
        """Sets the genes of this OverviewNetworkItem.


        :param genes: The genes of this OverviewNetworkItem.  # noqa: E501
        :type: list[str]
        """

        self._genes = genes

    @property
    def annotation_name(self):
        """Gets the annotation_name of this OverviewNetworkItem.  # noqa: E501


        :return: The annotation_name of this OverviewNetworkItem.  # noqa: E501
        :rtype: str
        """
        return self._annotation_name

    @annotation_name.setter
    def annotation_name(self, annotation_name):
        """Sets the annotation_name of this OverviewNetworkItem.


        :param annotation_name: The annotation_name of this OverviewNetworkItem.  # noqa: E501
        :type: str
        """

        self._annotation_name = annotation_name

    @property
    def network_name(self):
        """Gets the network_name of this OverviewNetworkItem.  # noqa: E501


        :return: The network_name of this OverviewNetworkItem.  # noqa: E501
        :rtype: str
        """
        return self._network_name

    @network_name.setter
    def network_name(self, network_name):
        """Sets the network_name of this OverviewNetworkItem.


        :param network_name: The network_name of this OverviewNetworkItem.  # noqa: E501
        :type: str
        """

        self._network_name = network_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OverviewNetworkItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OverviewNetworkItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
