# coding: utf-8

"""
    sbml4j API

    This is the api for the SBML4j Service   # noqa: E501

    OpenAPI spec version: 1.1.4
    Contact: thorsten.tiede@uni-tuebingen.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GeneAnalysisItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gene': 'str',
        'secondary_names': 'list[str]',
        'qualifier': 'list[QualifierItem]',
        'pathways': 'list[PathwayInfoItem]',
        'relations': 'list[RelationInfoItem]',
        'reactions': 'list[ReactionInfoItem]'
    }

    attribute_map = {
        'gene': 'gene',
        'secondary_names': 'secondary names',
        'qualifier': 'qualifier',
        'pathways': 'pathways',
        'relations': 'relations',
        'reactions': 'reactions'
    }

    def __init__(self, gene=None, secondary_names=None, qualifier=None, pathways=None, relations=None, reactions=None):  # noqa: E501
        """GeneAnalysisItem - a model defined in Swagger"""  # noqa: E501
        self._gene = None
        self._secondary_names = None
        self._qualifier = None
        self._pathways = None
        self._relations = None
        self._reactions = None
        self.discriminator = None
        if gene is not None:
            self.gene = gene
        if secondary_names is not None:
            self.secondary_names = secondary_names
        if qualifier is not None:
            self.qualifier = qualifier
        if pathways is not None:
            self.pathways = pathways
        if relations is not None:
            self.relations = relations
        if reactions is not None:
            self.reactions = reactions

    @property
    def gene(self):
        """Gets the gene of this GeneAnalysisItem.  # noqa: E501

        The gene name this item is for  # noqa: E501

        :return: The gene of this GeneAnalysisItem.  # noqa: E501
        :rtype: str
        """
        return self._gene

    @gene.setter
    def gene(self, gene):
        """Sets the gene of this GeneAnalysisItem.

        The gene name this item is for  # noqa: E501

        :param gene: The gene of this GeneAnalysisItem.  # noqa: E501
        :type: str
        """

        self._gene = gene

    @property
    def secondary_names(self):
        """Gets the secondary_names of this GeneAnalysisItem.  # noqa: E501


        :return: The secondary_names of this GeneAnalysisItem.  # noqa: E501
        :rtype: list[str]
        """
        return self._secondary_names

    @secondary_names.setter
    def secondary_names(self, secondary_names):
        """Sets the secondary_names of this GeneAnalysisItem.


        :param secondary_names: The secondary_names of this GeneAnalysisItem.  # noqa: E501
        :type: list[str]
        """

        self._secondary_names = secondary_names

    @property
    def qualifier(self):
        """Gets the qualifier of this GeneAnalysisItem.  # noqa: E501

        The qualifier of this gene  # noqa: E501

        :return: The qualifier of this GeneAnalysisItem.  # noqa: E501
        :rtype: list[QualifierItem]
        """
        return self._qualifier

    @qualifier.setter
    def qualifier(self, qualifier):
        """Sets the qualifier of this GeneAnalysisItem.

        The qualifier of this gene  # noqa: E501

        :param qualifier: The qualifier of this GeneAnalysisItem.  # noqa: E501
        :type: list[QualifierItem]
        """

        self._qualifier = qualifier

    @property
    def pathways(self):
        """Gets the pathways of this GeneAnalysisItem.  # noqa: E501

        The pathways this gene is found in  # noqa: E501

        :return: The pathways of this GeneAnalysisItem.  # noqa: E501
        :rtype: list[PathwayInfoItem]
        """
        return self._pathways

    @pathways.setter
    def pathways(self, pathways):
        """Sets the pathways of this GeneAnalysisItem.

        The pathways this gene is found in  # noqa: E501

        :param pathways: The pathways of this GeneAnalysisItem.  # noqa: E501
        :type: list[PathwayInfoItem]
        """

        self._pathways = pathways

    @property
    def relations(self):
        """Gets the relations of this GeneAnalysisItem.  # noqa: E501

        The relations this gene is part of  # noqa: E501

        :return: The relations of this GeneAnalysisItem.  # noqa: E501
        :rtype: list[RelationInfoItem]
        """
        return self._relations

    @relations.setter
    def relations(self, relations):
        """Sets the relations of this GeneAnalysisItem.

        The relations this gene is part of  # noqa: E501

        :param relations: The relations of this GeneAnalysisItem.  # noqa: E501
        :type: list[RelationInfoItem]
        """

        self._relations = relations

    @property
    def reactions(self):
        """Gets the reactions of this GeneAnalysisItem.  # noqa: E501

        The reactions this gene is part of  # noqa: E501

        :return: The reactions of this GeneAnalysisItem.  # noqa: E501
        :rtype: list[ReactionInfoItem]
        """
        return self._reactions

    @reactions.setter
    def reactions(self, reactions):
        """Sets the reactions of this GeneAnalysisItem.

        The reactions this gene is part of  # noqa: E501

        :param reactions: The reactions of this GeneAnalysisItem.  # noqa: E501
        :type: list[ReactionInfoItem]
        """

        self._reactions = reactions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeneAnalysisItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeneAnalysisItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
