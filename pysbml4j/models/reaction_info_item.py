# coding: utf-8

"""
    sbml4j API

    This is the api for the SBML4j Service   # noqa: E501

    OpenAPI spec version: 1.1.4
    Contact: thorsten.tiede@uni-tuebingen.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ReactionInfoItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'sbo_term': 'str',
        'reversible': 'bool',
        'reactants': 'list[ReactionPartnerItem]',
        'products': 'list[ReactionPartnerItem]',
        'catalysts': 'list[ReactionPartnerItem]'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'sbo_term': 'sboTerm',
        'reversible': 'reversible',
        'reactants': 'reactants',
        'products': 'products',
        'catalysts': 'catalysts'
    }

    def __init__(self, name=None, type=None, sbo_term=None, reversible=None, reactants=None, products=None, catalysts=None):  # noqa: E501
        """ReactionInfoItem - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._type = None
        self._sbo_term = None
        self._reversible = None
        self._reactants = None
        self._products = None
        self._catalysts = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if sbo_term is not None:
            self.sbo_term = sbo_term
        if reversible is not None:
            self.reversible = reversible
        if reactants is not None:
            self.reactants = reactants
        if products is not None:
            self.products = products
        if catalysts is not None:
            self.catalysts = catalysts

    @property
    def name(self):
        """Gets the name of this ReactionInfoItem.  # noqa: E501

        The name of the reaction  # noqa: E501

        :return: The name of this ReactionInfoItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReactionInfoItem.

        The name of the reaction  # noqa: E501

        :param name: The name of this ReactionInfoItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this ReactionInfoItem.  # noqa: E501

        The type of the reaction  # noqa: E501

        :return: The type of this ReactionInfoItem.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReactionInfoItem.

        The type of the reaction  # noqa: E501

        :param type: The type of this ReactionInfoItem.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def sbo_term(self):
        """Gets the sbo_term of this ReactionInfoItem.  # noqa: E501

        The SBO Term of the reaction  # noqa: E501

        :return: The sbo_term of this ReactionInfoItem.  # noqa: E501
        :rtype: str
        """
        return self._sbo_term

    @sbo_term.setter
    def sbo_term(self, sbo_term):
        """Sets the sbo_term of this ReactionInfoItem.

        The SBO Term of the reaction  # noqa: E501

        :param sbo_term: The sbo_term of this ReactionInfoItem.  # noqa: E501
        :type: str
        """

        self._sbo_term = sbo_term

    @property
    def reversible(self):
        """Gets the reversible of this ReactionInfoItem.  # noqa: E501

        Whether the reaction is reversible  # noqa: E501

        :return: The reversible of this ReactionInfoItem.  # noqa: E501
        :rtype: bool
        """
        return self._reversible

    @reversible.setter
    def reversible(self, reversible):
        """Sets the reversible of this ReactionInfoItem.

        Whether the reaction is reversible  # noqa: E501

        :param reversible: The reversible of this ReactionInfoItem.  # noqa: E501
        :type: bool
        """

        self._reversible = reversible

    @property
    def reactants(self):
        """Gets the reactants of this ReactionInfoItem.  # noqa: E501


        :return: The reactants of this ReactionInfoItem.  # noqa: E501
        :rtype: list[ReactionPartnerItem]
        """
        return self._reactants

    @reactants.setter
    def reactants(self, reactants):
        """Sets the reactants of this ReactionInfoItem.


        :param reactants: The reactants of this ReactionInfoItem.  # noqa: E501
        :type: list[ReactionPartnerItem]
        """

        self._reactants = reactants

    @property
    def products(self):
        """Gets the products of this ReactionInfoItem.  # noqa: E501


        :return: The products of this ReactionInfoItem.  # noqa: E501
        :rtype: list[ReactionPartnerItem]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this ReactionInfoItem.


        :param products: The products of this ReactionInfoItem.  # noqa: E501
        :type: list[ReactionPartnerItem]
        """

        self._products = products

    @property
    def catalysts(self):
        """Gets the catalysts of this ReactionInfoItem.  # noqa: E501


        :return: The catalysts of this ReactionInfoItem.  # noqa: E501
        :rtype: list[ReactionPartnerItem]
        """
        return self._catalysts

    @catalysts.setter
    def catalysts(self, catalysts):
        """Sets the catalysts of this ReactionInfoItem.


        :param catalysts: The catalysts of this ReactionInfoItem.  # noqa: E501
        :type: list[ReactionPartnerItem]
        """

        self._catalysts = catalysts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReactionInfoItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReactionInfoItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
