# coding: utf-8

"""
    sbml4j API

    This is the api for the SBML4j Service   # noqa: E501

    OpenAPI spec version: 1.1.5
    Contact: thorsten.tiede@uni-tuebingen.de
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pysbml4j.api_client import ApiClient


class PathwaysApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_pathway_collection(self, body, user, **kwargs):  # noqa: E501
        """Create a collectionPathway from the submitted pathways  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_pathway_collection(body, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PathwayCollectionCreationItem body: List of pathwayUUIDs and a databaseUUID to create the collection for (required)
        :param str user: The user which requests the creation (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_pathway_collection_with_http_info(body, user, **kwargs)  # noqa: E501
        else:
            (data) = self.create_pathway_collection_with_http_info(body, user, **kwargs)  # noqa: E501
            return data

    def create_pathway_collection_with_http_info(self, body, user, **kwargs):  # noqa: E501
        """Create a collectionPathway from the submitted pathways  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_pathway_collection_with_http_info(body, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PathwayCollectionCreationItem body: List of pathwayUUIDs and a databaseUUID to create the collection for (required)
        :param str user: The user which requests the creation (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_pathway_collection" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_pathway_collection`")  # noqa: E501
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `create_pathway_collection`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'user' in params:
            header_params['user'] = params['user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pathwayCollection', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_all_pathway_uui_ds(self, user, **kwargs):  # noqa: E501
        """List UUIDs of available pathways  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_all_pathway_uui_ds(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: The user which requests listing of their pathways (required)
        :param bool hide_collections: Do hide Collection Pathways in the output
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_all_pathway_uui_ds_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.list_all_pathway_uui_ds_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def list_all_pathway_uui_ds_with_http_info(self, user, **kwargs):  # noqa: E501
        """List UUIDs of available pathways  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_all_pathway_uui_ds_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: The user which requests listing of their pathways (required)
        :param bool hide_collections: Do hide Collection Pathways in the output
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'hide_collections']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_all_pathway_uui_ds" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `list_all_pathway_uui_ds`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'hide_collections' in params:
            query_params.append(('hideCollections', params['hide_collections']))  # noqa: E501

        header_params = {}
        if 'user' in params:
            header_params['user'] = params['user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pathwayUUIDs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_all_pathways(self, user, **kwargs):  # noqa: E501
        """List available pathways  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_all_pathways(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: The user which requests listing of their pathways (required)
        :param bool hide_collections: Do hide Collection Pathways in the output
        :return: list[PathwayInventoryItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_all_pathways_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.list_all_pathways_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def list_all_pathways_with_http_info(self, user, **kwargs):  # noqa: E501
        """List available pathways  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_all_pathways_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: The user which requests listing of their pathways (required)
        :param bool hide_collections: Do hide Collection Pathways in the output
        :return: list[PathwayInventoryItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'hide_collections']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_all_pathways" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `list_all_pathways`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'hide_collections' in params:
            query_params.append(('hideCollections', params['hide_collections']))  # noqa: E501

        header_params = {}
        if 'user' in params:
            header_params['user'] = params['user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/pathways', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PathwayInventoryItem]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def map_pathway(self, user, uuid, mapping_type, **kwargs):  # noqa: E501
        """Map pathwayContents on a new network representation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.map_pathway(user, uuid, mapping_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: The user which requests the creation (required)
        :param str uuid: The UUID of the pathway to be mapped (required)
        :param str mapping_type: The type of mapping to create (required)
        :return: WarehouseInventoryItem
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.map_pathway_with_http_info(user, uuid, mapping_type, **kwargs)  # noqa: E501
        else:
            (data) = self.map_pathway_with_http_info(user, uuid, mapping_type, **kwargs)  # noqa: E501
            return data

    def map_pathway_with_http_info(self, user, uuid, mapping_type, **kwargs):  # noqa: E501
        """Map pathwayContents on a new network representation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.map_pathway_with_http_info(user, uuid, mapping_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: The user which requests the creation (required)
        :param str uuid: The UUID of the pathway to be mapped (required)
        :param str mapping_type: The type of mapping to create (required)
        :return: WarehouseInventoryItem
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'uuid', 'mapping_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method map_pathway" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `map_pathway`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `map_pathway`")  # noqa: E501
        # verify the required parameter 'mapping_type' is set
        if ('mapping_type' not in params or
                params['mapping_type'] is None):
            raise ValueError("Missing the required parameter `mapping_type` when calling `map_pathway`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'uuid' in params:
            path_params['UUID'] = params['uuid']  # noqa: E501

        query_params = []
        if 'mapping_type' in params:
            query_params.append(('mappingType', params['mapping_type']))  # noqa: E501

        header_params = {}
        if 'user' in params:
            header_params['user'] = params['user']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mapping/{UUID}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='WarehouseInventoryItem',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
